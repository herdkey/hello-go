name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# Cancel in-progress runs for the same PR or branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-west-2
  INFRA_AWS_ACCOUNT_ID: "073835883885"

jobs:

  # Test and build the application
  # Upload the built binary as an artifact
  build:
    name: Build & Test
    uses: savisec/github-actions/.github/workflows/go-build.yml@v1
    with:
      build-artifact-name: &build_artifact_name binaries
      build-output-file: ./bin

  # Build and push the Docker image
  docker-build-push:
    name: Docker Build & Push (${{ matrix.component }})
    uses: savisec/github-actions/.github/workflows/docker-build-push.yml@v1
    needs: build
    strategy:
      matrix:
        component:
          - api
          - lambda
    with:
      env-name: 'test'
      local-image-tag: 'hello-go-${{ matrix.component }}:latest'
      component: ${{ matrix.component }}
      build-cmd: './docker/${{ matrix.component }}/build.sh'
      artifact-name: *build_artifact_name
      artifact-path: ./bin
    permissions:
      contents: read
      # Required by the AWS OIDC provider
      id-token: write

  # Test CDK infrastructure
  cdk-test:
    name: CDK Build & Test
    uses: ./.github/workflows/cdk-build.yml
    with:
      working-directory: cdk

  # Deploy CDK infrastructure to test environment
  cdk-deploy-test:
    name: Test
    uses: ./.github/workflows/cdk-deploy.yml
    needs:
      - cdk-test
      - docker-build-push
    with:
      action: deploy
      working-directory: cdk
      image-tag: ${{ needs.docker-build-push.outputs.sha-version }}
      env-name: test
      aws-region: us-west-2
    permissions:
      contents: read
      id-token: write

  # Teardown CDK infrastructure
  cdk-destroy-test:
    name: Test
    uses: ./.github/workflows/cdk-deploy.yml
    needs:
      - docker-build-push
      - cdk-deploy-test
    # Without always(), GitHub won't even evaluate this condition if any job in `needs:` failed.
    # `always()` forces the condition to run regardless of upstream failures, so we can still
    # decide based solely on docker-build-push's result.
    if: needs.docker-build-push.result == 'success' && always()
    with:
      action: destroy
      working-directory: cdk
      image-tag: ${{ needs.docker-build-push.outputs.sha-version }}
      env-name: test
      aws-region: us-west-2
    permissions:
      contents: read
      id-token: write

  # Deploy CDK infrastructure to live environment (play/stage/prod)
  cdk-deploy-live:
    name: Play
    uses: ./.github/workflows/cdk-deploy.yml
    needs: docker-build-push
    if: github.ref == 'refs/heads/main'
    with:
      action: deploy
      working-directory: cdk
      image-tag: ${{ needs.docker-build-push.outputs.sha-version }}
      env-name: play
      aws-region: us-west-2
    permissions:
      contents: read
      id-token: write
