name: CDK Deploy

on:
  workflow_call:
    inputs:
      action:
        type: string
        description: CDK action to perform (deploy, destroy, synth, rollback)
        required: true
      node-version:
        type: string
        description: Node.js version to use (defaults to version from package.json volta config)
        required: false
        default: ''
      working-directory:
        type: string
        description: Working directory containing the CDK project
        required: false
        default: 'cdk'
      just-common-ref:
        type: string
        description: The ref of just-common to use
        required: false
        default: v1
      image-tag:
        type: string
        description: The ECR image tag to deploy (e.g., short SHA or branch name)
        required: true
      aws-region:
        type: string
        description: AWS Region
        required: false
        default: us-west-2
      env-name:
        type: string
        description: Environment name used for role naming (e.g., test, play, stage, prod)
        required: false
        default: test
      cdk-qualifier:
        type: string
        description: |
          CDK toolkit qualifier
          (see https://docs.aws.amazon.com/cdk/v2/guide/bootstrapping-customizing.html)
        required: false
        default: hnb659fds
    outputs:
      instance-ns:
        description: The calculated instance namespace (e.g., pr-123, main)
        value: ${{ jobs.cdk-action.outputs.instance-ns }}
      stack-name:
        description: The CloudFormation stack name
        value: ${{ jobs.cdk-action.outputs.stack-name }}

jobs:
  cdk-action:
    name: CDK ${{ inputs.action }}
    runs-on: ubuntu-latest
    # In test envs, we don't use a GitHub deployment environment
    environment: ${{ inputs.env-name != 'test' && inputs.env-name || '' }}
    permissions:
      contents: read
      # Required by the AWS OIDC provider
      id-token: write
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}
    outputs:
      instance-ns: ${{ steps.calculate-namespace.outputs.instance_ns }}
      stack-name: ${{ steps.calculate-namespace.outputs.stack_name }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          working-directory: ${{ inputs.working-directory }}
          node-version: ${{ inputs.node-version }}

      - name: Setup Just
        uses: savisec/github-actions/.github/actions/setup-just@v1.2
        with:
          just-common-ref: ${{ inputs.just-common-ref }}
          working-directory: ${{ inputs.working-directory }}

      - name: AWS Login
        uses: savisec/github-actions/.github/actions/aws-login@v1.2
        with:
          aws-account-id: ${{ inputs.env-name == 'test' && vars.AWS_ACCOUNT_ID_TEST || vars.AWS_ACCOUNT_ID_LIVE }}
          aws-region: ${{ inputs.aws-region }}
          role: ${{ inputs.env-name }}
          debug-oidc: false

      - name: Calculate namespace and stack name
        id: calculate-namespace
        run: |
          # Determine namespace from ref (branch name or PR number)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            INSTANCE_NS="pr-${{ github.event.pull_request.number }}"
          else
            # Extract branch name from ref (refs/heads/branch-name -> branch-name)
            INSTANCE_NS="${{ github.ref_name }}"
            # Sanitize namespace: replace non-alphanumeric chars with hyphens, lowercase
            INSTANCE_NS=$(
              echo "$INSTANCE_NS" \
              | tr '[:upper:]' '[:lower:]' \
              | sed 's/[^a-z0-9-]/-/g' \
              | sed 's/--*/-/g' \
              | sed 's/^-//' \
              | sed 's/-$//'
            )
          fi

          # Calculate stack name (matches CDK naming convention)
          STACK_NAME="hello-go-api-${INSTANCE_NS}"

          # Export outputs
          echo "instance_ns=$INSTANCE_NS" >> $GITHUB_OUTPUT
          echo "stack_name=$STACK_NAME" >> $GITHUB_OUTPUT

      - name: Run CDK ${{ inputs.action }}
        run: |
          # Run CDK action using just with variables
          just \
            image_tag="${{ inputs.image-tag }}" \
            instance_ns="${{ steps.calculate-namespace.outputs.instance_ns }}" \
            commit_hash="${{ github.sha }}" \
            stage="${{ inputs.env-name }}" \
            ${{ inputs.action }}

      - name: Upload CDK outputs
        if: inputs.action == 'deploy'
        uses: actions/upload-artifact@v4
        with:
          name: cdk-outputs-${{ steps.calculate-namespace.outputs.stack_name }}
          path: ${{ inputs.working-directory }}/cdk-outputs.json
          retention-days: 1
          if-no-files-found: error
